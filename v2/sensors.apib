FORMAT: 1A

# Sensors

API to obtain Sense's sensors' metadata and values

## Sensors [/v2/sensors]

The main path for the sensors API

## Get the list of sensors [GET /v2/sensors]

Get the list of sensors, in server-defined order, with it's current value.  In addition to the list, if available, the status of the sensor system is also returned.

+ Response 200 (application/json)

    {
       "status" : "OK",
       "sensors" : [
            {
                "type" : "TEMPERATURE",
                "name" : "Temperature",
                "condition" : "IDEAL",
                "unit" : "CELCIUS",
                "value" : 70,
                "message" : "The temperature is just right",
                "scale" : [
                    {
                        "name" : "Cold",
                        "min" : 0,
                        "max" : 35,
                        "condition" : "ALERT"
                    }
                ]
            }
       ]
    }

    + Attributes
        + status (enum, required)
            + Members
                + OK
                + NO_SENSE
                + WAITING_FOR_DATA
        + sensors (array[Sensor], required)

## Get data points for specified sensors [POST /v2/sensors]

Get a set of data points in a specific scope for each specified sensor.  The POST HTTP method is used over the GET method to allow sending a request payload to the server

+ Request (application/json)

    {
        "scope" : "DAY_5_MINUTE",
        "sensors" : ["TEMPERATURE, HUMIDITY"]
    }

    + Attributes
        + scope (enum, required)
            + Members
                + DAY_5_MINUTE
                + WEEK_1_HOUR
                + LAST_3H_5_MINUTE 
        + sensors (array[string], required)

+ Response 200 (application/json)

    {
        "timestamps" : [
            {
                "o" : 123456789,
                "t" : 123456789
            }
        ],
        "sensors" : {
            "TEMPERATURE" : [,
                20.1, 30, 40.8, 50, 60, 10
            ]
        }
    }

+ Attributes
    + timestamps (array[Timestamp], optional)
    + sensors (object, optional)

## Data Structures

### Sensor

+ type: `TEMPERATURE` (enum, required) - type of sensor
    + Members
        + `TEMPERATURE`
        + `AIR`
        + `HUMIDITY`
        + `VOC`
        + `CO2`
        + `UV`
        + `LIGHT`
        + `LIGHT_TEMP`
        + `SOUND`
        + `PRESSURE`

+ unit: `CELCIUS` (enum, required) - unit for the sensor value
    + Members
        + 'CELCIUS`
        + `FAHRENHEIT`
        + `MG_CM`
        + `PERCENT`
        + `LUX`
        + `DB`
        + `VOC`
        + `PPM`
        + `RATIO`
        + `KELVIN`
        + `KPA`

+ condition: `IDEAL` (enum, required) - condition of sensor based on current value
    + Members
        + `IDEAL`
        + `WARNING`
        + `ALERT`

+ name: `Temperature` (string, required) - localized name of the sensor
+ value: `80` (number, required) - current value of sensor
+ message: `The temperature is just right` (string, required) - localized message for the current value of the sensor
+ scale: (array[Scale]) - array of Scale objects

### Scale

+ min: `0` (number, optional) - minimum value for this scale.  Can be null to denote no value
+ max: `0` (number, optional) - max value for this scale.  Can be null to denote no max value
+ name: `Dry` (string, required) - localized name for this scale
+ condition: `IDEAL` (enum, required)
    + Members
        + IDEAL
        + WARNING
        + ALERT

### DataPoint

+ value: `0` (number, required) - value of the data point. -1 denotes gap in data
+ offset_millis: `123456789` (number, required) - tz offset in milliseconds
+ timestamp: `123456789` (number, required) timestamp for the datapoint

## Timestamp

+ o: `-12345677` (number, required) - offset from utc, to apply to time
+ t: `123456789` (number, required) - time in milliseconds from epoc

