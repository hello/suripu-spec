FORMAT: 1A

# Sensors

API to obtain Sense's sensors' metadata and values

## Sensors [/v2/sensors]

The main path for the sensors API

## Get the list of sensors [GET /v2/sensors]

Get the list of sensors, in server-defined order, with it's current value.  In addition to the list, if available, the status of the sensor system is also returned.

+ Response 200 (application/json)

    {
       "status" : "OK",
       "sensors" : [
            {
                "type" : "TEMP",
                "name" : "Temperature",
                "unit" : "CELCIUS",
                "value" : 70,
                "description" : "The temperature is just right",
                "scale" : [
                    {
                        "name" : "Cold",
                        "min" : 0,
                        "max" : 35,
                        "condition" : "ALERT"
                    }
                ]
            }
       ]
    }

    + Attributes
        + status (string, required)
        + sensors (array[Sensor], required)

## Get data points for specified sensors [POST /v2/sensors]

Get a set of data points in a specific scope for each specified sensor.  The POST HTTP method is used over the GET method to allow sending a request payload to the server to specify customizations for each sensor.

+ Request (application/json)

    {
        "sensors" : [
            {
                "type" : "TEMP",
                "scope" : "DAY_5_MINUTE"
                "unit" : "CELCIUS",
                "aggregation_method" : "AVG"
            }
        ]
    }

    + Attributes
        + sensors (array[DataRequest], required)

+ Response (application/json)

    {
        "type" : "TEMP",
        "unit" : "CELCIUS",
        "values" : [
            {
                "value" : 71,
                "offset_millis" : 1234567890,
                "timestamp" : 123456789
            }
        ]
    }

    + Attributes
        + type (enum, required)
            + Members
                + `TEMP`
                + `AIR`
                + `HUMIDITY`
                + `VOC`
                + `C02`
                + `UV`
                + `LIGHT`
                + `LIGHT_TEMP`
                + `SOUND`
                + `PRESSURE`

        + unit (enum, required)
            + Members
                + 'CELCIUS`
                + `FAHRENHEIT`
                + `MG_CM`
                + `PERCENT`
                + `LUX`
                + `DB`
                + `VOC`
                + `PPM`
                + `RATIO`
                + `KELVIN`
                + `KPA`
        
        + values (array[DataPoint], required)

## Data Structures

### Sensor

+ type: `TEMP` (enum, required) - type of sensor
+ unit: `CELCIUS` (enum, required) - unit for the sensor value
+ name: `Temperature` (string, required) - localized name of the sensor
+ value: `80` (number, required) - current value of sensor
+ description: `The temperature is just right` (string, required) - localized description for the current value of the sensor
+ scale: (array[Scale]) - array of Scale objects

### Scale

+ min: `0` (number, optional) - minimum value for this scale.  Can be null to denote no value
+ max: `0` (number, optional) - max value for this scale.  Can be null to denote no max value
+ name: `Dry` (string, required) - localized name for this scale
+ condition: `IDEAL` (enum, required)
    + Members
        + IDEAL
        + WARNING
        + ALERT

### DataPoint

+ value: `0` (number, required) - value of the data point. -1 denotes gap in data
+ offset_millis: `123456789` (number, required) - tz offset in milliseconds
+ timestamp: `123456789` (number, required) timestamp for the datapoint

## DataRequest

+ type: `TEMP` (enum, required) - type of sensor
+ scope: `DAY_5_MIN` (enum, required) - scope of the data
+ unit: `CELCIUS` (enum, optional) - unit for the data point
+ aggregate_method: `AVG` (enum, required) - what the data point value represent

